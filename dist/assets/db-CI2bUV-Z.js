import{g as j,_ as S,a as q,m as Q}from"./index-Cfi8bBO4.js";var d={exports:{}};const _=j(S),W="17.2.2",J={version:W};var b;function H(){if(b)return d.exports;b=1;var f={};const m=_,g=_,x=_,$=_,D=J.version,y=["🔐 encrypt with Dotenvx: https://dotenvx.com","🔐 prevent committing .env to code: https://dotenvx.com/precommit","🔐 prevent building .env in docker: https://dotenvx.com/prebuild","📡 observe env with Radar: https://dotenvx.com/radar","📡 auto-backup env with Radar: https://dotenvx.com/radar","📡 version env with Radar: https://dotenvx.com/radar","🛠️  run anywhere with `dotenvx run -- yourcommand`","⚙️  specify custom .env file path with { path: '/custom/path/.env' }","⚙️  enable debug logging with { debug: true }","⚙️  override existing env vars with { override: true }","⚙️  suppress all logs with { quiet: true }","⚙️  write to custom object with { processEnv: myObject }","⚙️  load multiple .env files with { path: ['.env.local', '.env'] }"];function A(){return y[Math.floor(Math.random()*y.length)]}function v(e){return typeof e=="string"?!["false","0","no","off",""].includes(e.toLowerCase()):!!e}function k(){return process.stdout.isTTY}function R(e){return k()?`\x1B[2m${e}\x1B[0m`:e}const Y=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function K(e){const r={};let n=e.toString();n=n.replace(/\r\n?/mg,`
`);let o;for(;(o=Y.exec(n))!=null;){const c=o[1];let a=o[2]||"";a=a.trim();const t=a[0];a=a.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),t==='"'&&(a=a.replace(/\\n/g,`
`),a=a.replace(/\\r/g,"\r")),r[c]=a}return r}function L(e){e=e||{};const r=T(e);e.path=r;const n=i.configDotenv(e);if(!n.parsed){const t=new Error(`MISSING_DATA: Cannot parse ${r} for an unknown reason`);throw t.code="MISSING_DATA",t}const o=w(e).split(","),c=o.length;let a;for(let t=0;t<c;t++)try{const s=o[t].trim(),l=B(n,s);a=i.decrypt(l.ciphertext,l.key);break}catch(s){if(t+1>=c)throw s}return i.parse(a)}function U(e){console.error(`[dotenv@${D}][WARN] ${e}`)}function p(e){console.log(`[dotenv@${D}][DEBUG] ${e}`)}function O(e){console.log(`[dotenv@${D}] ${e}`)}function w(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:f.DOTENV_KEY&&f.DOTENV_KEY.length>0?f.DOTENV_KEY:""}function B(e,r){let n;try{n=new URL(r)}catch(s){if(s.code==="ERR_INVALID_URL"){const l=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw l.code="INVALID_DOTENV_KEY",l}throw s}const o=n.password;if(!o){const s=new Error("INVALID_DOTENV_KEY: Missing key part");throw s.code="INVALID_DOTENV_KEY",s}const c=n.searchParams.get("environment");if(!c){const s=new Error("INVALID_DOTENV_KEY: Missing environment part");throw s.code="INVALID_DOTENV_KEY",s}const a=`DOTENV_VAULT_${c.toUpperCase()}`,t=e.parsed[a];if(!t){const s=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${a} in your .env.vault file.`);throw s.code="NOT_FOUND_DOTENV_ENVIRONMENT",s}return{ciphertext:t,key:o}}function T(e){let r=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const n of e.path)m.existsSync(n)&&(r=n.endsWith(".vault")?n:`${n}.vault`);else r=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else r=g.resolve(process.cwd(),".env.vault");return m.existsSync(r)?r:null}function V(e){return e[0]==="~"?g.join(x.homedir(),e.slice(1)):e}function C(e){const r=v(f.DOTENV_CONFIG_DEBUG||e&&e.debug),n=v(f.DOTENV_CONFIG_QUIET||e&&e.quiet);(r||!n)&&O("Loading env from encrypted .env.vault");const o=i._parseVault(e);let c=f;return e&&e.processEnv!=null&&(c=e.processEnv),i.populate(c,o,e),{parsed:o}}function F(e){const r=g.resolve(process.cwd(),".env");let n="utf8",o=f;e&&e.processEnv!=null&&(o=e.processEnv);let c=v(o.DOTENV_CONFIG_DEBUG||e&&e.debug),a=v(o.DOTENV_CONFIG_QUIET||e&&e.quiet);e&&e.encoding?n=e.encoding:c&&p("No encoding is specified. UTF-8 is used by default");let t=[r];if(e&&e.path)if(!Array.isArray(e.path))t=[V(e.path)];else{t=[];for(const u of e.path)t.push(V(u))}let s;const l={};for(const u of t)try{const h=i.parse(m.readFileSync(u,{encoding:n}));i.populate(l,h,e)}catch(h){c&&p(`Failed to load ${u} ${h.message}`),s=h}const N=i.populate(o,l,e);if(c=v(o.DOTENV_CONFIG_DEBUG||c),a=v(o.DOTENV_CONFIG_QUIET||a),c||!a){const u=Object.keys(N).length,h=[];for(const I of t)try{const E=g.relative(process.cwd(),I);h.push(E)}catch(E){c&&p(`Failed to load ${I} ${E.message}`),s=E}O(`injecting env (${u}) from ${h.join(",")} ${R(`-- tip: ${A()}`)}`)}return s?{parsed:l,error:s}:{parsed:l}}function M(e){if(w(e).length===0)return i.configDotenv(e);const r=T(e);return r?i._configVault(e):(U(`You set DOTENV_KEY but you are missing a .env.vault file at ${r}. Did you forget to build it?`),i.configDotenv(e))}function G(e,r){const n=Buffer.from(r.slice(-64),"hex");let o=Buffer.from(e,"base64");const c=o.subarray(0,12),a=o.subarray(-16);o=o.subarray(12,-16);try{const t=$.createDecipheriv("aes-256-gcm",n,c);return t.setAuthTag(a),`${t.update(o)}${t.final()}`}catch(t){const s=t instanceof RangeError,l=t.message==="Invalid key length",N=t.message==="Unsupported state or unable to authenticate data";if(s||l){const u=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw u.code="INVALID_DOTENV_KEY",u}else if(N){const u=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw u.code="DECRYPTION_FAILED",u}else throw t}}function P(e,r,n={}){const o=!!(n&&n.debug),c=!!(n&&n.override),a={};if(typeof r!="object"){const t=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw t.code="OBJECT_REQUIRED",t}for(const t of Object.keys(r))Object.prototype.hasOwnProperty.call(e,t)?(c===!0&&(e[t]=r[t],a[t]=r[t]),o&&p(c===!0?`"${t}" is already defined and WAS overwritten`:`"${t}" is already defined and was NOT overwritten`)):(e[t]=r[t],a[t]=r[t]);return a}const i={configDotenv:F,_configVault:C,_parseVault:L,config:M,decrypt:G,parse:K,populate:P};return d.exports.configDotenv=i.configDotenv,d.exports._configVault=i._configVault,d.exports._parseVault=i._parseVault,d.exports.config=i.config,d.exports.decrypt=i.decrypt,d.exports.parse=i.parse,d.exports.populate=i.populate,d.exports=i,d.exports}var z=H();const X=q(z);var Z={};X.config();const re=async()=>{try{const f=await Q.connect(Z.MONGO_URI);console.log(`MongoDB Connected: ${f.connection.host}`)}catch(f){console.error(`Error: ${f.message}`),process.exit(1)}};export{re as default};
